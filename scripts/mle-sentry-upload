#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )";
KEYS_PATH="${SCRIPT_DIR}/.sentry.keys";

read_keys() {

  # keys file not found, exit without failing
  if [[ ! -f "${KEYS_PATH}" ]]; then
    exit 0;
  fi;

  source "${KEYS_PATH}";

  if [[ -z "${SENTRY_ORG}" ]]; then
    echo -e "error - SENTRY_ORG not set";
    exit -1;
  elif [[ -z "${SENTRY_PROJECT}" ]]; then
    echo -e "error - SENTRY_PROJECT not set";
    exit -1;
  elif [[ -z "${SENTRY_AUTH_TOKEN}" ]]; then
    echo -e "error - SENTRY_AUTH_TOKEN not set";
    exit -1;
  fi;
}

upload_dsyms() {

  echo -e "\nUploading debug symbols to sentry - $(date)\n";

  if [[ -z "${ARCHIVE_DSYMS_PATH}" ]]; then
    echo "error - ARCHIVE_DSYMS_PATH is unset!";
    exit -1;
  elif [[ ! -d "${ARCHIVE_DSYMS_PATH}" ]]; then
    echo "error - directory for ARCHIVE_DSYMS_PATH doesn't exist: '${ARCHIVE_DSYMS_PATH}'";
    exit -1;
  fi;

  sentry-cli upload-dif --force-foreground "${ARCHIVE_DSYMS_PATH}";

  echo;
}

create_release() {

  echo -e "\nCreating a sentry release - $(date)\n";

  if [[ -z "${CURRENT_PROJECT_VERSION}" ]]; then
    echo "error - CURRENT_PROJECT_VERSION is unset!";
    exit -1;
  elif [[ -z "${VERSION_BUILD}" ]]; then
    echo "error - VERSION_BUILD is unset!";
    exit -1;
  fi;

  SENTRY_RELEASE_VERSION="${PRODUCT_BUNDLE_IDENTIFIER}@${CURRENT_PROJECT_VERSION}+${VERSION_BUILD}";

  sentry-cli releases new "${SENTRY_RELEASE_VERSION}";
  sentry-cli releases set-commits --auto "${SENTRY_RELEASE_VERSION}";
  sentry-cli releases finalize "${SENTRY_RELEASE_VERSION}";

  echo;
}

main() {

  cd "${SRCROOT}";
  pwd -P;

  read_keys;

  # upload_dsyms;
  create_release;
}


main "${@}" 2>&1 | tee -a '/tmp/mle-sentry-upload.log';

